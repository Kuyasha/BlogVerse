import { useState, useRef, useEffect } from "react";
//Import fireStore reference from firebaseInit file
import {db} from "../firebaseInit";
//Import all the required functions from fireStore
import { collection, deleteDoc, addDoc, doc, getDocs, onSnapshot, setDoc} from "firebase/firestore"; 


export default function Blog(){
    const [formData, setFormData]=useState({title:"", content:""});
    const [blogs,setBlogs]=useState([]); //this is an empty array initially
    const titleRef=useRef(null);
    


    //1)Everytime On re-rendering the app, to set the focus at title
    useEffect(()=>{
        titleRef.current.focus();
    },[]);
    


    //2)Everytime the title of the first blog(the blog which is added last i.e blog[0])
    //should be the title of the whole React page
    useEffect(()=>{
        if(blogs.length && blogs[0].title){
            document.title=blogs[0].title;
        }
        else{//When empty blog is added or blog[0] is empty
            document.title="No blogs!!"
        }
    },[blogs]);


    
    //3)UPDATING ALL THE DOCUMENTS FROM FIRESTORE IN OUR APP
    useEffect(() => {

    /*  //Get all the documents from the fireStore using getDocs()
        async function fetchData(){
            const snapShot =await getDocs(collection(db, "blogs"));
            console.log(snapShot);
            const blogs = snapShot.docs.map((doc) => {
                return{
                    id: doc.id,
                    ...doc.data()
                }
            })
            console.log(blogs);
            setBlogs(blogs);
        }
        fetchData();
    */

        // Get RealTime Updates from the firebase database using onSnapshot() 
        const unsub =  onSnapshot(collection(db,"blogs"), (snapShot) => {
            const blogs = snapShot.docs.map((doc) => {
                    return{
                        id: doc.id,
                        ...doc.data()
                    }
                })
                console.log(blogs);
                setBlogs(blogs);
        })

    },[]);
    


    //4)Handle Submit Function
    async function handleSubmit(e){
        e.preventDefault();
        titleRef.current.focus();
        // Commenting setBlogs() as realtime Updates will be recieved from the database
        //setBlogs([{title:formData.title, content:formData.content}, ...blogs]);

        
        //ADD A NEW DOCUMENT WITH AN AUTOGENERATED ID,IT WILL BE VISIBLE AT FIREBASE 
        /*i)addDoc either this way
        //await addDoc(collection(db, "blogs"), {
            // title: formData.title,
            // content: formData.content,
            // createdOn: new Date()
        // })

        //ii)addDoc either this way
        const docRef = collection(db, "blogs");
        await addDoc(docRef, {
                title: formData.title,
                content: formData.content,
                createdOn: new Date()
        });
        */
        //iii)setDoc this way =>(setDoc is useful where you are generating IDs by yourself or adding a new one)
        const docRef = doc(collection(db, "blogs"));
        await setDoc(docRef, {
                title: formData.title,
                content: formData.content,
                createdOn: new Date()
        });

        //reset condition after adding a blog
        setFormData({title: "", content: ""});
    }


    
    //5)REMOVE BLOG FUNCTION
    async function removeBlog(id){
        //Deleting Document locally; Blogs=[B1,B2,B3,B4]
        //setBlogs(blogs.filter((blog,index) => index!==i));

        // Deleting a document from the Firestore 
        const docRef = doc(db,"blogs",id);
        await deleteDoc(docRef);
    }



    return(
        <>
        <h1>Write a Blog!</h1>
        <div className="section">
            <form onSubmit={handleSubmit}>
            <Row label="Title">
                <input className='input'
                       placeholder='Enter the title here...'
                       value={formData.title}
                       ref={titleRef} //To bring the focus back to the title field 
                       onChange={(e)=>setFormData({title:e.target.value, content:formData.content})}
                />
            </Row>
            <Row label="Content">
                <textarea className='input content'
                          placeholder='Content goes here...'
                          value={formData.content}
                          required
                          onChange={(e)=>setFormData({title:formData.title, content: e.target.value})}
                />
            </Row>
            <button className='btn'>ADD</button>
            </form>
        </div>
        <hr/>


        {/* Section where submitted blogs will be displayed */}
        <h2> Blogs </h2>
        {blogs.map((blog,i) => (
            <div className="blog" key={i}>
                <h3>{blog.title}</h3>
                <hr/>
                <p>{blog.content}</p>
                
                {/*Adding delete button on every blog */}
                {/* passing the blog id instead of index of the array to remove the document from the database */}
                <div className='blog-btn'>
                    <button onClick={()=>removeBlog(blog.id)} className='btn remove'>Delete</button>
                </div>
            </div>
        ))}

        </>
    )
}


function Row(props){
    const{label} = props;
    return(
        <>
        <label> {label}  <br/></label>
        {props.children}
        <hr />
        </>
    )
}